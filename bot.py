from flask import Flask, request
import requests
import logging
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Telegram API Token
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # OpenRouter API Token

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        params = {'url': WEBHOOK_URL}
        response = requests.post(url, params=params)
        if response.status_code == 200:
            logger.info("Webhook set successfully.")
        else:
            logger.error(f"Error setting webhook: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")

set_webhook()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter
def chat_with_ai(user_message):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "liquid/lfm-7b",  # –ú–µ–Ω–µ–µ –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [{"role": "user", "content": user_message}],
        "max_tokens": 100  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
    }

    response = requests.post(url, headers=headers, json=data)
    response_json = response.json()

    if "choices" in response_json:
        return response_json["choices"][0]["message"]["content"]
    else:
        return f"–û—à–∏–±–∫–∞ OpenRouter: {response_json.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.debug(f"Received data: {data}")

        if "message" in data and "text" in data["message"]:
            text = data["message"]["text"]
            chat_id = data["message"]["chat"]["id"]

            if text == "/start":
                user_name = data["message"]["from"].get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                user_id = data["message"]["from"]["id"]
                response_text = f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</b>\n" \
                                f"<i>–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: {user_id}.</i>\n" \
                                f"<u>–í—ã –Ω–∞–∂–∞–ª–∏: {text}</u>"

                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                reply_markup = {
                    "inline_keyboard": [
                        [
                            {"text": "‚ú®–°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ 3D –º–æ–¥–µ–ª–∏‚ú®", "web_app": {"url": "https://letomaneteo.github.io/myweb/page1.html"}}
                        ],
                        [
                            {"text": "üîó–í—Å–µ –æ web-–∞–Ω–∏–º–∞—Ü–∏–∏üîó", "url": "https://www.3dls.store/%D0%B0%D0%BD%D0%B8%D0%BC%D0%B0%D1%86%D0%B8%D1%8F-%D0%BD%D0%B0-%D1%81%D0%B0%D0%B9%D1%82%D0%B5"}
                        ],
                        [
                            {"text": "üéÆ–ü–æ–∏–≥—Ä–∞—Ç—å (–ü–æ–±–µ–¥–∏—Ç—å –∑–∞ 22 –∫–ª–∏–∫–∞)üéÆ", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}
                        ]
                    ]
                }

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reply_markup –≤ —Å—Ç—Ä–æ–∫—É JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    reply_markup_json = json.dumps(reply_markup)
                except Exception as e:
                    logger.error(f"Error converting reply_markup to JSON: {e}")
                    reply_markup_json = None

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
                send_message(chat_id, response_text, reply_markup_json)

            else:
                bot_response = chat_with_ai(text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ OpenRouter
                send_message(chat_id, bot_response)

        return "OK", 200  # –û–¥–∏–Ω return –≤ –∫–æ–Ω—Ü–µ
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return f"Error: {e}", 500


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message(chat_id, text, parse_mode='HTML'):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        params = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
        response = requests.post(url, params=params)
        if response.status_code == 200:
            logger.info(f"Message sent to {chat_id}")
        else:
            logger.error(f"Error sending message: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"Error sending message: {e}")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8080)

