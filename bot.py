from flask import Flask, request
import requests
import logging
import json  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ JSON
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –∏ Hugging Face
TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
HF_TOKEN = os.getenv("HF_TOKEN")  # –¢–æ–∫–µ–Ω Hugging Face –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        params = {'url': WEBHOOK_URL}
        response = requests.post(url, params=params)
        if response.status_code == 200:
            logger.info("Webhook set successfully.")
        else:
            logger.error(f"Error setting webhook: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")

set_webhook()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        logger.debug(f"Received data: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ

        if "message" in data and "text" in data["message"]:
            text = data["message"]["text"]
            chat_id = data["message"]["chat"]["id"]

            if text == "/start":
                user_name = data["message"]["from"].get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                user_id = data["message"]["from"]["id"]
                logger.info(f"Sending reply to chat_id: {chat_id} (User: {user_name}, ID: {user_id})")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                response_text = f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</b>\n" \
                                f"<i>–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: {user_id}.</i>\n" \
                                f"<u>–í—ã –Ω–∞–∂–∞–ª–∏: {text}</u>"

                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                reply_markup = {
                    "inline_keyboard": [
                        [
                            {
                                "text": "‚ú®–°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ 3D –º–æ–¥–µ–ª–∏‚ú®",
                                "web_app": {"url": "https://letomaneteo.github.io/myweb/page1.html"}
                            }
                        ],
                        [
                            {
                                "text": "üîó–í—Å–µ –æ web-–∞–Ω–∏–º–∞—Ü–∏–∏üîó",
                                "url": "https://www.3dls.store/%D0%B0%D0%BD%D0%B8%D0%BC%D0%B0%D1%86%D0%B8%D1%8F-%D0%BD%D0%B0-%D1%81%D0%B0%D0%B9%D1%82%D0%B5"
                            }
                        ],
                        [
                            {
                                "text": "üéÆ–ü–æ–∏–≥—Ä–∞—Ç—å(–ü–æ–±–µ–¥–∏—Ç—å –∑–∞ 22 –∫–ª–∏–∫–∞)üéÆ",
                                "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}
                            }
                        ]
                    ]
                }

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reply_markup –≤ —Å—Ç—Ä–æ–∫—É JSON
                reply_markup_json = json.dumps(reply_markup)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
                send_message(chat_id, response_text, reply_markup_json)

            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Hugging Face
                response_text = get_ai_response(text)
                send_message(chat_id, response_text)

        return "OK", 200
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return f"Error: {e}", 500

def get_ai_response(user_input):
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ HuggingFace
        huggingface_url = "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill"
        headers = {
            "Authorization": f"Bearer {os.getenv('HUGGINGFACE_TOKEN')}"  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        }
        payload = {"inputs": user_input}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.post(huggingface_url, headers=headers, json=payload)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            logger.error(f"Error from HuggingFace API: {response.status_code} - {response.text}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        response_data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
        if isinstance(response_data, dict):
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî —Å–ª–æ–≤–∞—Ä—å
            return response_data.get("generated_text", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç.")
        elif isinstance(response_data, list) and len(response_data) > 0:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî —Å–ø–∏—Å–æ–∫
            return response_data[0].get("generated_text", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç.")
        else:
            # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            logger.error(f"Unexpected response format: {response_data}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò."

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"Error during AI request: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò."


def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        params = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
        if reply_markup:
            params['reply_markup'] = reply_markup
        response = requests.post(url, params=params)
        if response.status_code == 200:
            logger.info(f"Message sent to {chat_id}")
        else:
            logger.error(f"Error sending message: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"Error sending message: {e}")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8080)
