from flask import Flask, request
import requests
import logging
import json
import os
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Telegram API Token
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # OpenRouter API Token

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
def set_bot_commands():
    url = f"https://api.telegram.org/bot{TOKEN}/setMyCommands"
    commands = {
        "commands": [
            {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
            {"command": "menu", "description": "–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"}
        ]
    }
    
    response = requests.post(url, json=commands)
    if response.status_code == 200:
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {response.text}")

set_bot_commands()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    params = {'url': WEBHOOK_URL}
    response = requests.post(url, params=params)
    if response.status_code == 200:
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {response.text}")

set_webhook()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        params = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
        if reply_markup:
            params['reply_markup'] = json.dumps(reply_markup)
        response = requests.post(url, params=params)
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /menu
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /menu
def show_menu(chat_id):
    reply_markup = {
        "keyboard": [
            [{"text": "–°–º–æ—Ç—Ä–µ—Ç—å (—Ç–µ—Ö.—Ä–∞–±–æ—Ç—ã)", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}],
            [{"text": "–°–º–æ—Ç—Ä–µ—Ç—å (—Ç–µ—Ö.—Ä–∞–±–æ—Ç—ã)", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}],
            [{"text": "–°–º–æ—Ç—Ä–µ—Ç—å (—Ç–µ—Ö.—Ä–∞–±–æ—Ç—ã)", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}],
            [{"text": "üí¨ –û–±—â–∏–π –±–æ—Ç", "callback_data": "general_bot"}],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—â–µ–≥–æ –±–æ—Ç–∞
            [{"text": "üß† –ë–æ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É", "callback_data": "text_bot"}]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–∏–º –±–æ—Ç–æ–º —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è:", reply_markup)

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if "message" in data and "text" in data["message"]:
            text = data["message"]["text"]
            chat_id = data["message"]["chat"]["id"]

            if text == "/start":
                user_name = data["message"]["from"].get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                user_id = data["message"]["from"]["id"]
                response_text = f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</b>\n" \
                                f"<i>–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: {user_id}, –Ω–æ —ç—Ç–æ –Ω–∞—à —Å–µ–∫—Ä–µ—Ç.</i>\n" \
                                f"<u>–í—ã –Ω–∞–∂–∞–ª–∏: {text}, –∞ –ø–æ—Ç–æ–º—É –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å</u>"
                
                reply_markup = {
                    "inline_keyboard": [
                        [{"text": "‚ú®–®–æ—É—Ä—É–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö 3D —Ç–æ–≤–∞—Ä–æ–≤‚ú®", "web_app": {"url": "https://letomaneteo.github.io/myweb/page1.html"}}],
                        [{"text": "üîó–í—Å–µ –æ web-–∞–Ω–∏–º–∞—Ü–∏–∏üîó", "url": "https://www.3dls.store/–∞–Ω–∏–º–∞—Ü–∏—è-–Ω–∞-—Å–∞–π—Ç–µ"}],
                        [{"text": "üéÆ–ò–≥—Ä–∞: –ü–æ–±–µ–¥–∞ –≤ 22 –∫–ª–∏–∫–∞üéÆ", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}]
                    ]
                }
                
                send_message(chat_id, response_text, reply_markup)
                send_message(chat_id, f"‚ÑπÔ∏è {user_name}, –≤ –º–µ–Ω—é –µ—Å—Ç—å –µ—â–µ —Å—Å—ã–ª–∫–∏!")

            elif text == "/menu":
                show_menu(chat_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

            elif text == "/parse":
                parsed_data = parse_3dls_page()  # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                send_message(chat_id, parsed_data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

            elif text == "/parse_ai":
                parsed_data = parse_3dls_page()  # –ü–∞—Ä—Å–∏–º
                ai_response = chat_with_ai(parsed_data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
                send_message(chat_id, ai_response)  # –û—Ç–≤–µ—Ç –ò–ò

            else:
                bot_response = chat_with_ai(text)
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞
        if "callback_query" in data:
            callback_data = data["callback_query"]["data"]
            chat_id = data["callback_query"]["from"]["id"]
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –±–æ—Ç–∞
            if callback_data == "general_bot":
                current_bot_choice[chat_id] = "general_bot"
                send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–±—â–∏–π –±–æ—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
            elif callback_data == "text_bot":
                current_bot_choice[chat_id] = "text_bot"
                send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–æ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                 send_message(chat_id, bot_response)

           else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫–æ–π –±–æ—Ç –≤—ã–±—Ä–∞–Ω
            selected_bot = current_bot_choice.get(chat_id, "general_bot")
        
            if selected_bot == "general_bot":
                bot_response = chat_with_ai(text)
            elif selected_bot == "text_bot":
                parsed_data = parse_3dls_page()
                bot_response = chat_with_ai(parsed_data)
            send_message(chat_id, bot_response)


        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return f"Error: {e}", 500


def parse_3dls_page():
    url = "https://letomaneteo.github.io/myweb/3dls.html"
    try:
        response = requests.get(url)
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}"
        
        soup = BeautifulSoup(response.text, "html.parser")
        
        # –î–æ–ø—É—Å—Ç–∏–º, –º—ã —Ö–æ—Ç–∏–º –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ <h1> –∏ –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã <p>
        title = soup.find("h1").text.strip() if soup.find("h1") else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        paragraphs = [p.text.strip() for p in soup.find_all("p")]

        return f"üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\nüîπ –û–ø–∏—Å–∞–Ω–∏–µ: {' '.join(paragraphs[:2])}"  # –û–≥—Ä–∞–Ω–∏—á–∏–º 2 –ø–µ—Ä–≤—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"
        
def chat_with_ai(user_message):
    url = "https://proxy.tune.app/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",  # API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        "Content-Type": "application/json"
    }
    data = {
        "temperature": 0.9,
        "messages": [
            {"role": "system", "content": "You are TuneStudio"},
            {"role": "user", "content": user_message}
        ],
        "model": "deepseek/deepseek-v3",
        "stream": False,
        "frequency_penalty": 0.2,
        "max_tokens": 100
    }

    response = requests.post(url, headers=headers, json=data)
    
    try:
        response_json = response.json()
        if "choices" in response_json:
            return response_json["choices"][0]["message"]["content"]
        else:
            return f"–û—à–∏–±–∫–∞ Tune API: {response_json.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API: {e}"
       
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.getenv("PORT", 8080)))
