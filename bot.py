from flask import Flask, request
import requests
import logging
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∂–¥–µ—Ç –ª–∏ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò)
user_state = {}

def set_bot_commands():
    url = f"https://api.telegram.org/bot{TOKEN}/setMyCommands"
    commands = {"commands": [
        {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
        {"command": "menu", "description": "–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"}
    ]}
    requests.post(url, json=commands)

def set_webhook():
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    requests.post(url, params={'url': WEBHOOK_URL})

set_bot_commands()
set_webhook()

def send_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    params = {'chat_id': chat_id, 'text': text, 'parse_mode': 'HTML'}
    if reply_markup:
        params['reply_markup'] = json.dumps(reply_markup)
    requests.post(url, params=params)

def show_menu(chat_id):
    reply_markup = {
        "keyboard": [
            [{"text": "ü§ñ –í—ã–∑–≤–∞—Ç—å –ò–ò"}],
            [{"text": "‚ú® –®–æ—É—Ä—É–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö 3D —Ç–æ–≤–∞—Ä–æ–≤", "web_app": {"url": "https://letomaneteo.github.io/myweb/page1.html"}}],
            [{"text": "üéÆ –ò–≥—Ä–∞: –ü–æ–±–µ–¥–∞ –≤ 22 –∫–ª–∏–∫–∞", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}]
        ],
        "resize_keyboard": True
    }
    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup)

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if "message" in data and "text" in data["message"]:
        text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]
        user_id = data["message"]["from"]["id"]
        
        if text == "/start":
            send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        elif text == "/menu":
            show_menu(chat_id)
        elif text == "ü§ñ –í—ã–∑–≤–∞—Ç—å –ò–ò":
            user_state[user_id] = "awaiting_ai"
            send_message(chat_id, "–ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        elif user_id in user_state and user_state[user_id] == "awaiting_ai":
            response_text = chat_with_ai(text)
            send_message(chat_id, response_text)
            del user_state[user_id]  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        else:
            send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu.")
    return "OK", 200

def chat_with_ai(user_message):
    url = "https://proxy.tune.app/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    data = {
        "temperature": 0.9,
        "messages": [
            {"role": "system", "content": "–í—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫"},
            {"role": "user", "content": user_message}
        ],
        "model": "deepseek/deepseek-v3"
    }
    response = requests.post(url, headers=headers, json=data)
    try:
        response_json = response.json()
        return response_json.get("choices", [{}])[0].get("message", {}).get("content", "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò")
    except:
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò."

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.getenv("PORT", 8080)))
