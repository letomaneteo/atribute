from flask import Flask, request
import requests
import logging
import json
import os
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_TOKEN")  # Telegram API Token
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # OpenRouter API Token

BASE_URL = "https://raw.githubusercontent.com/letomaneteo/myweb/main/3dls.txt"

def set_bot_commands():
    url = f"https://api.telegram.org/bot{TOKEN}/setMyCommands"
    commands = {
        "commands": [
            {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
            {"command": "menu", "description": "–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"}
        ]
    }
    
    response = requests.post(url, json=commands)
    if response.status_code == 200:
        logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {response.text}")

set_bot_commands()

def set_webhook():
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    params = {'url': WEBHOOK_URL}
    response = requests.post(url, params=params)
    if response.status_code == 200:
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {response.text}")

set_webhook()

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å GitHub

def fetch_github_text():
    try:
        response = requests.get(BASE_URL)
        response.raise_for_status()
        return response.text.strip() if response.text.strip() else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å GitHub: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."

github_text = fetch_github_text()
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {github_text[:200]}...")

# üîπ DeepSeek API

def chat_with_deepseek(user_message):
    url = "https://proxy.tune.app/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "temperature": 0.8,
        "messages": [
            {"role": "system", "content": f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤: {github_text}"},
            {"role": "user", "content": user_message}
        ],
        "model": "deepseek/deepseek-r1",
        "stream": False,
        "frequency_penalty": 0,
        "max_tokens": 900
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        response_json = response.json()
        return response_json["choices"][0]["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ AI: {e}"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if "message" in data and "text" in data["message"]:
            text = data["message"]["text"]
            chat_id = data["message"]["chat"]["id"]

            if text == "/start":
                user_name = data["message"]["from"].get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                response_text = f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</b>\n" \
                                f"–í—ã –Ω–∞–∂–∞–ª–∏: {text}, –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
                
                reply_markup = {
                    "inline_keyboard": [
                        [{"text": "‚ú®–®–æ—É—Ä—É–º—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö 3D —Ç–æ–≤–∞—Ä–æ–≤‚ú®", "web_app": {"url": "https://letomaneteo.github.io/myweb/page1.html"}}],
                        [{"text": "üîó–í—Å–µ –æ web-–∞–Ω–∏–º–∞—Ü–∏–∏üîó", "url": "https://www.3dls.store/–∞–Ω–∏–º–∞—Ü–∏—è-–Ω–∞-—Å–∞–π—Ç–µ"}],
                        [{"text": "üéÆ–ò–≥—Ä–∞: –ü–æ–±–µ–¥–∞ –≤ 22 –∫–ª–∏–∫–∞üéÆ", "web_app": {"url": "https://letomaneteo.github.io/myweb/newpage.html"}}]
                    ]
                }
                send_message(chat_id, response_text, reply_markup)
            else:
                ai_response = chat_with_deepseek(text)
                send_message(chat_id, ai_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return "OK", 200

def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        params = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode}
        if reply_markup:
            params['reply_markup'] = json.dumps(reply_markup)
        response = requests.post(url, params=params)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
